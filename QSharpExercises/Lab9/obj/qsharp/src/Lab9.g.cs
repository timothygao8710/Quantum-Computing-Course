//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Reverse\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":25,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":40}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the Quantum Fourier Transform\",\" circuit. This will perform an in-place transformation of the\",\" amplitudes of each state in the superposition from the\",\" value-versus-time to the value-versus-frequency domain.\",\"\",\" # Input\",\" ## register\",\" A register containing qubits in superposition.\",\" The superposition is unknown, and the amplitudes are not guaranteed to\",\" be uniform.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Reverse\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":25,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Reverse\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":25,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Lab9.Reverse\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Reverse\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":25,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsControlled specialization for Lab9.Reverse\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Reverse\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":25,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Lab9.Reverse\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":24}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Lab9.QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsControlled specialization for Lab9.QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Lab9.QFT\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"input\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"output\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum modular\",\" exponentiation function: |o> = a^|x> mod b.\",\" |x> and |o> are input and output registers respectively, and a and b\",\" are classical integers.\",\"\",\" # Input\",\" ## a\",\" The base power of the term being exponentiated.\",\"\",\" ## b\",\" The modulus for the function.\",\"\",\" ## input\",\" The register containing a superposition of all of the exponent values\",\" that the user wants to calculate; this superposition is arbitrary.\",\"\",\" ## output\",\" This register must contain the output |o> of the modular\",\" exponentiation function. It will start in the |0...0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":128,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum subroutine of Shor's\",\" algorithm. You will be given a number to factor and some guess to a\",\" possible factor - both of which are integers.\",\" You must set up, execute, and measure the quantum circuit.\",\" You should return the fraction that was produced by measuring the\",\" result at the end of the subroutine, in the form of a tuple:\",\" the first value should be the number you measured, and the second\",\" value should be 2^n, where n is the number of qubits you use in your\",\" input register.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to factor. This will become the modulus\",\" for the modular arithmetic used in the subroutine.\",\"\",\" ## guess\",\" The number that's being guessed as a possible factor. This will become\",\" the base of exponentiation for the modular arithmetic used in the\",\" subroutine.\",\"\",\" # Output\",\" A tuple representing the continued fraction approximation that the\",\" subroutine measured. The first value should be the numerator (the\",\" value that was measured from the qubits), and the second value should\",\" be the denominator (the total size of the input space, which is 2^n\",\" where n is the size of your input register).\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":128,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":195,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numerator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominatorThreshold\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you will be given an arbitrary numerator and\",\" denominator for a fraction, along with some threshold value for the\",\" denominator.\",\" Your goal is to return the largest convergent of the continued\",\" fraction that matches the provided number, with the condition that the\",\" denominator of your convergent must be less than the threshold value.\",\"\",\" Using the example from the lecture section, if you are given the\",\" number 341 / 512 with a threshold of 21, the most accurate convergent\",\" that respects this threshold is 2 / 3, so that's what you would return.\",\"\",\" # Input\",\" ## numerator\",\" The numerator of the original fraction\",\"\",\" ## denominator\",\" The denominator of the original fraction\",\"\",\" ## denominatorThreshold\",\" A threshold value for the denominator. The continued fraction\",\" convergent that you find must be less than this value. If it's higher,\",\" you must return the previous convergent.\",\"\",\" # Output\",\" A tuple representing the convergent that you found. The first element\",\" should be the numerator, and the second should be the denominator.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":195,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":275,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":49}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given two integers - a number that you want\",\" to find the factors of, and an arbitrary guess as to one of the\",\" factors of the number. This guess was already checked to see if it was\",\" a factor of the number, so you know that it *isn't* a factor. It is\",\" guaranteed to be co-prime with numberToFactor.\",\"\",\" Your job is to find the period of the modular exponentation function\",\" using these two values as the arguments. That is, you must find the\",\" period of the equation y = guess^x mod numberToFactor.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to find the factors for\",\"\",\" ## guess\",\" Some co-prime integer that is smaller than numberToFactor\",\"\",\" # Output\",\" The period of y = guess^x mod numberToFactor.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":275,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":325,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"period\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":22},\"Item2\":{\"Line\":3,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a number to find the factors of,\",\" a guess of a factor (which is guaranteed to be co-prime), and the\",\" period of the modular exponentiation function that you found in\",\" Exercise 4.\",\"\",\" Your goal is to use the period to find a factor of the number if\",\" possible.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number to find a factor of\",\"\",\" ## guess\",\" A co-prime number that is *not* a factor\",\"\",\" ## period\",\" The period of the function y = guess^x mod numberToFactor.\",\"\",\" # Output\",\" - If you can find a factor, return that factor.\",\" - If the period is odd, return -1.\",\" - If the period doesn't work for factoring, return -2.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":325,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace Lab9
{
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 26, 32)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Adjoint, 26, 32)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Controlled, 26, 32)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.ControlledAdjoint, 26, 32)]
    public partial class Reverse : Unitary<Microsoft.Quantum.Arithmetic.BigEndian>, ICallable
    {
        public Reverse(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Reverse";
        String ICallable.FullName => "Lab9.Reverse";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 27 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, ((register.Data.Length / 2L) - 1L)))
#line hidden
            {
#line 28 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Apply((register.Data[i], register.Data[((register.Data.Length - 1L) - i)]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, ((register.Data.Length / 2L) - 1L))))
#line hidden
            {
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Apply((register.Data[__qsVar0__i__], register.Data[((register.Data.Length - 1L) - __qsVar0__i__)]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, ((register.Data.Length / 2L) - 1L)))
#line hidden
            {
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Controlled.Apply((__controlQubits__, (register.Data[i], register.Data[((register.Data.Length - 1L) - i)])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, ((register.Data.Length / 2L) - 1L))))
#line hidden
            {
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Controlled.Apply((__controlQubits__, (register.Data[__qsVar0__i__], register.Data[((register.Data.Length - 1L) - __qsVar0__i__)])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(Microsoft.Quantum.Arithmetic.BigEndian data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register)
        {
            return __m__.Run<Reverse, Microsoft.Quantum.Arithmetic.BigEndian, QVoid>(register);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 32, 72)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Adjoint, 32, 72)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Controlled, 32, 72)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.ControlledAdjoint, 32, 72)]
    public partial class QFT : Unitary<Microsoft.Quantum.Arithmetic.BigEndian>, ICallable
    {
        public QFT(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "QFT";
        String ICallable.FullName => "Lab9.QFT";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Qubit)> Microsoft__Quantum__Intrinsic__R1Frac
        {
            get;
            set;
        }

        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> Reverse__
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 37 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var len = register.Data.Length;
#line 39 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (len - 1L)))
#line hidden
            {
#line 40 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Apply(register.Data[i]);
#line 41 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                foreach (var j in new QRange((i + 1L), (len - 1L)))
#line hidden
                {
#line 42 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    var a = ((j - i) + 1L);
#line 43 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Apply((register.Data.Slice(new QRange(j, j)), (2L, a, register.Data[i])));
                }
            }

#line 47 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            Reverse__.Apply(register);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar0__len__ = register.Data.Length;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            Reverse__.Adjoint.Apply(register);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar1__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar0__len__ - 1L))))
#line hidden
            {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                foreach (var __qsVar2__j__ in RangeReverse__.Apply(new QRange((__qsVar1__i__ + 1L), (__qsVar0__len__ - 1L))))
#line hidden
                {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    var __qsVar3__a__ = ((__qsVar2__j__ - __qsVar1__i__) + 1L);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Apply((register.Data.Slice(new QRange(__qsVar2__j__, __qsVar2__j__)), (2L, __qsVar3__a__, register.Data[__qsVar1__i__])));
                }

#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(register.Data[__qsVar1__i__]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var len = register.Data.Length;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (len - 1L)))
#line hidden
            {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, register.Data[i]));
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                foreach (var j in new QRange((i + 1L), (len - 1L)))
#line hidden
                {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    var a = ((j - i) + 1L);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Controlled.Apply((__controlQubits__, (register.Data.Slice(new QRange(j, j)), (2L, a, register.Data[i]))));
                }
            }

#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            Reverse__.Controlled.Apply((__controlQubits__, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar0__len__ = register.Data.Length;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            Reverse__.Adjoint.Controlled.Apply((__controlQubits__, register));
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar1__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar0__len__ - 1L))))
#line hidden
            {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                foreach (var __qsVar2__j__ in RangeReverse__.Apply(new QRange((__qsVar1__i__ + 1L), (__qsVar0__len__ - 1L))))
#line hidden
                {
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    var __qsVar3__a__ = ((__qsVar2__j__ - __qsVar1__i__) + 1L);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (register.Data.Slice(new QRange(__qsVar2__j__, __qsVar2__j__)), (2L, __qsVar3__a__, register.Data[__qsVar1__i__]))));
                }

#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, register.Data[__qsVar1__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__R1Frac = this.__Factory__.Get<IUnitary<(Int64,Int64,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1Frac));
            this.Reverse__ = this.__Factory__.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Reverse));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(Microsoft.Quantum.Arithmetic.BigEndian data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register)
        {
            return __m__.Run<QFT, Microsoft.Quantum.Arithmetic.BigEndian, QVoid>(register);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 72, 129)]
    public partial class Exercise1 : Operation<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public Exercise1(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Exercise1";
        String ICallable.FullName => "Lab9.Exercise1";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> Microsoft__Quantum__Math__ExpModI
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyByModularInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (a,b,input,output) = __in__;
#line 84 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var lenin = input.Length;
#line 85 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var lenout = output.Length;
#line 88 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(output[(lenout - 1L)]);
#line 90 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange((lenin - 1L), -(1L), 0L))
#line hidden
            {
#line 91 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                var pow = 2L.Pow(((lenin - 1L) - i));
#line 92 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                var c = Microsoft__Quantum__Math__ExpModI.Apply((a, pow, b));
#line 93 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Arithmetic__MultiplyByModularInteger.Controlled.Apply((new QArray<Qubit>(input[i]), (c, b, new Microsoft.Quantum.Arithmetic.LittleEndian(output))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Math__ExpModI = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
            this.Microsoft__Quantum__Arithmetic__MultiplyByModularInteger = this.__Factory__.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 a, Int64 b, IQArray<Qubit> input, IQArray<Qubit> output)
        {
            return __m__.Run<Exercise1, (Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, input, output));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 129, 196)]
    public partial class Exercise2 : Operation<(Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise2(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise2";
        String ICallable.FullName => "Lab9.Exercise2";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Log
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> Exercise1__
        {
            get;
            set;
        }

        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> QFT__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian> Microsoft__Quantum__Arithmetic__BigEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 149 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var n = Microsoft__Quantum__Math__Ceiling.Apply((Microsoft__Quantum__Math__Log.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(numberToFactor)) / Microsoft__Quantum__Math__Log.Apply(2D)));
#line hidden
            {
#line 151 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                var input = Allocate__.Apply((2L * n));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 152 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                        var output = Allocate__.Apply(n);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 154 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 156 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            Exercise1__.Apply((guess, numberToFactor, input, output));
#line 158 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            QFT__.Adjoint.Apply(new Microsoft.Quantum.Arithmetic.BigEndian(input));
#line 160 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            var res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian.Apply(new Microsoft.Quantum.Arithmetic.BigEndian(input)));
#line 161 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            ResetAll__.Apply(output);
#line 162 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            ResetAll__.Apply(input);
#line 163 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                            return (res, 2L.Pow((2L * n)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(output);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(input);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Log = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Log));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Exercise1__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(Exercise1));
            this.QFT__ = this.__Factory__.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(QFT));
            this.Microsoft__Quantum__Arithmetic__BigEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.BigEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise2, (Int64,Int64), (Int64,Int64)>((numberToFactor, guess));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 196, 276)]
    public partial class Exercise3 : Function<(Int64,Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise3(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise3";
        String ICallable.FullName => "Lab9.Exercise3";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Floor
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__ModI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numerator,denominator,denominatorThreshold) = __in__;
#line 202 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var n = new QArray<Int64>(0L, 1L);
#line 203 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var d = new QArray<Int64>(1L, 0L);
#line 205 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var P = new QArray<Int64>(numerator);
#line 206 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var Q = new QArray<Int64>(denominator);
#line 208 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var a = QArray<Int64>.Create(0L);
#line 209 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var r = QArray<Int64>.Create(0L);
#line 210 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var i = 0L;
#line 212 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            while (true)
            {
#line 213 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                a = QArray<Int64>.Add(a, new QArray<Int64>(Microsoft__Quantum__Math__Floor.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(P[i]) / Microsoft__Quantum__Convert__IntAsDouble.Apply(Q[i])))));
#line 214 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                r = QArray<Int64>.Add(r, new QArray<Int64>(Microsoft__Quantum__Math__ModI.Apply((P[i], Q[i]))));
#line 216 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                n = QArray<Int64>.Add(n, new QArray<Int64>(((a[i] * n[(i + 1L)]) + n[i])));
#line 217 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                d = QArray<Int64>.Add(d, new QArray<Int64>(((a[i] * d[(i + 1L)]) + d[i])));
#line 219 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                i = (i + 1L);
#line 220 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                P = QArray<Int64>.Add(P, new QArray<Int64>(Q[(i - 1L)]));
#line 221 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                Q = QArray<Int64>.Add(Q, new QArray<Int64>(r[(i - 1L)]));
                if (((d[(i + 1L)] >= denominatorThreshold) || (r[(i - 1L)] == 0L)))
                {
                    break;
                }
                else
                {
                }
            }

#line 225 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            if ((d[(i + 1L)] >= denominatorThreshold))
            {
#line 226 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                return (n[i], d[i]);
            }

#line 228 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            return (n[(i + 1L)], d[(i + 1L)]);
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Floor = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Floor));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__ModI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ModI));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numerator, Int64 denominator, Int64 denominatorThreshold)
        {
            return __m__.Run<Exercise3, (Int64,Int64,Int64), (Int64,Int64)>((numerator, denominator, denominatorThreshold));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 276, 326)]
    public partial class Exercise4 : Operation<(Int64,Int64), Int64>, ICallable
    {
        public Exercise4(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise4";
        String ICallable.FullName => "Lab9.Exercise4";
        protected ICallable<(Int64,Int64), (Int64,Int64)> Exercise2__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), (Int64,Int64)> Exercise3__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__ModI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 286 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var factor = 1L;
#line 287 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var dold = 1L;
#line 288 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var dnew = 1L;
#line 290 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            while (true)
            {
#line 291 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                dold = factor;
#line 292 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                var (numerator,denominator) = Exercise2__.Apply((numberToFactor, guess));
#line 293 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                var (connum,conden) = Exercise3__.Apply((numerator, denominator, numberToFactor));
#line 295 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                dnew = conden;
#line 296 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                factor = ((dold / dnew) / Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((dold, dnew)));
                if ((Microsoft__Quantum__Math__ModI.Apply((guess.Pow(factor), numberToFactor)) == 1L))
                {
                    break;
                }
                else
                {
                }
            }

#line 299 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            return factor;
        }

        ;
        public override void __Init__()
        {
            this.Exercise2__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Int64,Int64)>>(typeof(Exercise2));
            this.Exercise3__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), (Int64,Int64)>>(typeof(Exercise3));
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
            this.Microsoft__Quantum__Math__ModI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ModI));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise4, (Int64,Int64), Int64>((numberToFactor, guess));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 326, -1)]
    public partial class Exercise5 : Function<(Int64,Int64,Int64), Int64>, ICallable
    {
        public Exercise5(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise5";
        String ICallable.FullName => "Lab9.Exercise5";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess,period) = __in__;
#line 330 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            if (((period % 2L) == 1L))
            {
#line 331 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                return -(1L);
            }

#line 334 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            var factor = Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((numberToFactor, (guess.Pow((period / 2L)) + 1L)));
#line 336 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
            if ((((guess.Pow((period / 2L)) % numberToFactor) != 1L) && ((guess.Pow((period / 2L)) % numberToFactor) != (numberToFactor - 1L))))
            {
#line 337 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                return factor;
            }
            else
            {
#line 339 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Lab9.qs"
                return -(1L);
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess, Int64 period)
        {
            return __m__.Run<Exercise5, (Int64,Int64,Int64), Int64>((numberToFactor, guess, period));
        }
    }
}