//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"ReverseModExp\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":18,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"A\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"B\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Input\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Output\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"ReverseModExp\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":18,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"RunModExpTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"NumberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"RunModExpTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"RunSubroutineTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"NumberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Period\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Tolerance\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":18}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"RunSubroutineTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise1ModExpTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":85,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise1ModExpTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise2SubroutineTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":96,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise2SubroutineTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise3ConvergentTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":123,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise3ConvergentTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise4PeriodTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":164,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":165,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise4PeriodTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":165,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise5FactorTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":174,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":175,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Tests.Lab9\",\"Name\":\"Exercise5FactorTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs\",\"Position\":{\"Item1\":175,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
#line hidden
namespace Tests.Lab9
{
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 19, 44)]
    public partial class ReverseModExp : Operation<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public ReverseModExp(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ReverseModExp";
        String ICallable.FullName => "Tests.Lab9.ReverseModExp";
        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> Microsoft__Quantum__Math__ExpModI
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyByModularInteger
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (A,B,Input,Output) = __in__;
#line 26 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var outputAsLE = new Microsoft.Quantum.Arithmetic.LittleEndian(Output);
#line 27 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var inputSize = Input.Length;
#line 29 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            foreach (var i in new QRange((inputSize - 1L), -(1L), 0L))
#line hidden
            {
#line 31 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var powerOfTwo = ((inputSize - 1L) - i);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var powerOfGuess = 2L.Pow(powerOfTwo);
#line 34 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var constant = Microsoft__Quantum__Math__ExpModI.Apply((A, powerOfGuess, B));
#line 35 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                Microsoft__Quantum__Arithmetic__MultiplyByModularInteger.Adjoint.Controlled.Apply((new QArray<Qubit>(Input[i]), (constant, B, outputAsLE)));
            }

#line 40 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(Output[(Output.Length - 1L)]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__ExpModI = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
            this.Microsoft__Quantum__Arithmetic__MultiplyByModularInteger = this.__Factory__.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 A, Int64 B, IQArray<Qubit> Input, IQArray<Qubit> Output)
        {
            return __m__.Run<ReverseModExp, (Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>((A, B, Input, Output));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 44, 64)]
    public partial class RunModExpTest : Operation<(Int64,Int64), QVoid>, ICallable
    {
        public RunModExpTest(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "RunModExpTest";
        String ICallable.FullName => "Tests.Lab9.RunModExpTest";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> Lab9__Exercise1
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> ReverseModExp__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (Guess,NumberToFactor) = __in__;
#line 49 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var outputSize = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply((NumberToFactor + 1L))));
#line hidden
            {
#line 50 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var (input,output) = (Allocate__.Apply((outputSize * 2L)), Allocate__.Apply(outputSize));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 52 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 54 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Lab9__Exercise1.Apply((Guess, NumberToFactor, input, output));
#line 55 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    ReverseModExp__.Apply((Guess, NumberToFactor, input, output));
#line 57 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 59 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(input, output));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(input);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Lab9__Exercise1 = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(global::Lab9.Exercise1));
            this.ReverseModExp__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(ReverseModExp));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 Guess, Int64 NumberToFactor)
        {
            return __m__.Run<RunModExpTest, (Int64,Int64), QVoid>((Guess, NumberToFactor));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 64, 87)]
    public partial class RunSubroutineTest : Operation<(Int64,Int64,Int64,Double), Boolean>, ICallable
    {
        public RunSubroutineTest(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,Double)>, IApplyData
        {
            public In((Int64,Int64,Int64,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "RunSubroutineTest";
        String ICallable.FullName => "Tests.Lab9.RunSubroutineTest";
        protected ICallable<(Int64,Int64), (Int64,Int64)> Lab9__Exercise2
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__AbsD
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,Double), Boolean> __Body__ => (__in__) =>
        {
            var (Guess,NumberToFactor,Period,Tolerance) = __in__;
#line 71 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var (measurement,searchSpace) = Lab9__Exercise2.Apply((NumberToFactor, Guess));
#line 72 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Message__.Apply("Measured 0, trying again...");
#line 73 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if ((measurement == 0L))
            {
#line 74 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                return false;
            }

#line 76 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var scaledMeasurement = ((Microsoft__Quantum__Convert__IntAsDouble.Apply(measurement) / Microsoft__Quantum__Convert__IntAsDouble.Apply(searchSpace)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(Period));
#line 77 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var nearestMultiple = Microsoft__Quantum__Math__Round.Apply(scaledMeasurement);
#line 78 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var delta = Microsoft__Quantum__Math__AbsD.Apply((scaledMeasurement - Microsoft__Quantum__Convert__IntAsDouble.Apply(nearestMultiple)));
#line 80 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Message__.Apply(String.Format("Measured {0}/{1} => {2}, delta = {3}", measurement, searchSpace, scaledMeasurement, delta));
#line 81 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply(((delta < Tolerance), true, "QFT failed, your measurement was too far from one of the expected values. It could just be (very) bad luck, so consider trying again if you think you have the correct implementation."));
#line 82 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            return true;
        }

        ;
        public override void __Init__()
        {
            this.Lab9__Exercise2 = this.__Factory__.Get<ICallable<(Int64,Int64), (Int64,Int64)>>(typeof(global::Lab9.Exercise2));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__AbsD = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.AbsD));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64,Double) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Int64 Guess, Int64 NumberToFactor, Int64 Period, Double Tolerance)
        {
            return __m__.Run<RunSubroutineTest, (Int64,Int64,Int64,Double), Boolean>((Guess, NumberToFactor, Period, Tolerance));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 87, 98)]
    public partial class Exercise1ModExpTest : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise1ModExpTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise1ModExpTest")]
            public void Exercise1ModExpTest()
#line 87 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise1ModExpTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 87 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise1ModExpTest";
        String ICallable.FullName => "Tests.Lab9.Exercise1ModExpTest";
        protected ICallable<(Int64,Int64), QVoid> RunModExpTest__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 89 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            RunModExpTest__.Apply((5L, 9L));
#line 91 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            RunModExpTest__.Apply((7L, 15L));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.RunModExpTest__ = this.__Factory__.Get<ICallable<(Int64,Int64), QVoid>>(typeof(RunModExpTest));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise1ModExpTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 98, 125)]
    public partial class Exercise2SubroutineTest : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise2SubroutineTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise2SubroutineTest")]
            public void Exercise2SubroutineTest()
#line 98 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise2SubroutineTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 98 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise2SubroutineTest";
        String ICallable.FullName => "Tests.Lab9.Exercise2SubroutineTest";
        protected ICallable<(Int64,Int64,Int64,Double), Boolean> RunSubroutineTest__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 100 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            foreach (var i in new QRange(0L, 2L))
#line hidden
            {
#line 101 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var validMeasure = false;
#line 102 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                foreach (var j in new QRange(0L, 9L))
#line hidden
                {
#line 103 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    if (!(validMeasure))
                    {
#line 104 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                        validMeasure = RunSubroutineTest__.Apply((5L, 9L, 6L, 0.046875D));
                    }
                }

#line 107 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                if (!(validMeasure))
                {
#line 108 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    throw new ExecutionFailException("Your implementation measured 0 too many times. If you think you have the correct implementation, please try again.");
                }

#line 111 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                validMeasure = false;
#line 112 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                foreach (var j in new QRange(0L, 4L))
#line hidden
                {
#line 113 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    if (!(validMeasure))
                    {
#line 114 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                        validMeasure = RunSubroutineTest__.Apply((7L, 15L, 4L, 0.03125D));
                    }
                }

#line 117 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                if (!(validMeasure))
                {
#line 118 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    throw new ExecutionFailException("Your implementation measured 0 too many times. If you think you have the correct implementation, please try again.");
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.RunSubroutineTest__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64,Double), Boolean>>(typeof(RunSubroutineTest));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise2SubroutineTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 125, 166)]
    public partial class Exercise3ConvergentTest : Function<QVoid, QVoid>, ICallable
    {
        public Exercise3ConvergentTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise3ConvergentTest")]
            public void Exercise3ConvergentTest()
#line 125 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise3ConvergentTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 125 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise3ConvergentTest";
        String ICallable.FullName => "Tests.Lab9.Exercise3ConvergentTest";
        protected ICallable<(Int64,Int64,Int64), (Int64,Int64)> Lab9__Exercise3
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 126 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var period = 6D;
#line 128 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var tests = new QArray<(Int64,Int64,Int64,Int64,Int64)>((0L, 256L, 0L, 1L, 9L), (43L, 256L, 1L, 6L, 9L), (85L, 256L, 1L, 3L, 9L), (128L, 256L, 1L, 2L, 9L), (171L, 256L, 2L, 3L, 9L), (213L, 256L, 5L, 6L, 9L), (0L, 256L, 0L, 1L, 15L), (64L, 256L, 1L, 4L, 15L), (128L, 256L, 1L, 2L, 15L), (192L, 256L, 3L, 4L, 15L), (0L, 512L, 0L, 1L, 21L), (85L, 512L, 1L, 6L, 21L), (171L, 512L, 1L, 3L, 21L), (256L, 512L, 1L, 2L, 21L), (341L, 512L, 2L, 3L, 21L), (427L, 512L, 5L, 6L, 21L));
#line 152 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            foreach (var test in tests?.Copy())
#line hidden
            {
#line 153 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var (testNumerator,testDenominator,trueNumerator,trueDenominator,threshold) = test;
#line 154 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                var (numerator,denominator) = Lab9__Exercise3.Apply((testNumerator, testDenominator, threshold));
#line 155 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                if ((denominator == 0L))
                {
#line 156 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    throw new ExecutionFailException("You returned a denominator of 0, which should not be possible.");
                }

#line 158 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((numerator, trueNumerator, String.Format("You gave {0} / {1}, which doesn't match the expected convergent for {2} / {3}.", numerator, denominator, testNumerator, testDenominator)));
#line 159 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((denominator, trueDenominator, String.Format("You gave {0} / {1}, which doesn't match the expected convergent for {2} / {3}.", numerator, denominator, testNumerator, testDenominator)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Lab9__Exercise3 = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), (Int64,Int64)>>(typeof(global::Lab9.Exercise3));
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise3ConvergentTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 166, 176)]
    public partial class Exercise4PeriodTest : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise4PeriodTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise4PeriodTest")]
            public void Exercise4PeriodTest()
#line 166 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise4PeriodTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 166 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise4PeriodTest";
        String ICallable.FullName => "Tests.Lab9.Exercise4PeriodTest";
        protected ICallable<(Int64,Int64), Int64> Lab9__Exercise4
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 167 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var period = Lab9__Exercise4.Apply((9L, 5L));
#line 168 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((period, 6L, "Incorrect period found."));
#line 170 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            period = Lab9__Exercise4.Apply((15L, 7L));
#line 171 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((period, 4L, "Incorrect period found."));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Lab9__Exercise4 = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Lab9.Exercise4));
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise4PeriodTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs", OperationFunctor.Body, 176, -1)]
    public partial class Exercise5FactorTest : Function<QVoid, QVoid>, ICallable
    {
        public Exercise5FactorTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise5FactorTest")]
            public void Exercise5FactorTest()
#line 176 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise5FactorTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 176 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise5FactorTest";
        String ICallable.FullName => "Tests.Lab9.Exercise5FactorTest";
        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> Lab9__Exercise5
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 178 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((9L, 2L, 6L)), -(2L), "Your function should have returned -2 because this period results in a factor of 1."));
#line 180 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((9L, 4L, 3L)), -(1L), "Your function should have returned -1 because this period is odd."));
#line 182 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((9L, 7L, 3L)), -(1L), "Your function should have returned -1 because this period is odd."));
#line 184 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            var factor = Lab9__Exercise5.Apply((15L, 2L, 4L));
#line 185 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 187 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 190 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((15L, 4L, 2L));
#line 191 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 193 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 196 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((15L, 7L, 4L));
#line 197 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 199 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 202 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((15L, 8L, 4L));
#line 203 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 205 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 208 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((15L, 11L, 2L));
#line 209 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 211 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 214 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((15L, 13L, 4L));
#line 215 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 5L) && (factor != 3L)))
            {
#line 217 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 5 but got {0}.", factor));
            }

#line 220 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 2L, 6L));
#line 221 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 223 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 226 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((21L, 4L, 3L)), -(1L), "Your function should have returned -1 because this period is odd."));
#line 228 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((21L, 5L, 6L)), -(2L), "Your function should have returned -2 because this period results in a factor of 1."));
#line 230 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 8L, 2L));
#line 231 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 233 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 236 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 10L, 6L));
#line 237 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 239 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 242 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 11L, 6L));
#line 243 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 245 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 248 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 13L, 2L));
#line 249 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 251 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 254 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((21L, 16L, 3L)), -(1L), "Your function should have returned -1 because this period is odd."));
#line 256 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((21L, 17L, 6L)), -(2L), "Your function should have returned -2 because this period results in a factor of 1."));
#line 258 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            factor = Lab9__Exercise5.Apply((21L, 19L, 6L));
#line 259 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            if (((factor != 7L) && (factor != 3L)))
            {
#line 261 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
                throw new ExecutionFailException(String.Format("You returned an incorrect factor, expected 3 or 7 but got {0}.", factor));
            }

#line 264 "/home/ubuntu/timothys-folder/QSharpExercises/Lab9/Tests.qs"
            Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((Lab9__Exercise5.Apply((21L, 20L, 2L)), -(2L), "Your function should have returned -2 because this period results in a factor of 1."));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Lab9__Exercise5 = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Lab9.Exercise5));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise5FactorTest, QVoid, QVoid>(QVoid.Instance);
        }
    }
}