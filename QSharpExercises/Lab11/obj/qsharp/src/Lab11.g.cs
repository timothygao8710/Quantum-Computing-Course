//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":29,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"original\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"spares\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":46}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with an original qubit in an\",\" unknown state a|0> + b|1>. You are also provided with 6 blank qubits,\",\" all of which are in the |0> state. Your goal is to construct a\",\" \\\"logical qubit\\\" from these 7 qubits that acts like a single qubit, but\",\" can protect against a single bit-flip error and a single phase-flip\",\" error on any of the actual qubits. The bit-flip and phase-flip may be\",\" on different qubits.\",\"\",\" # Input\",\" ## original\",\" A qubit that you want to protect from bit flips. It will be in the\",\" state a|0> + b|1>.\",\"\",\" ## spares\",\" A register of 6 spare qubits that you can use to add error correction\",\" to the original qubit. All of them are in the |0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":29,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":29,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":11}},\"Documentation\":[\"automatically generated QsAdjoint specialization for QSharpExercises.Lab11.Exercise1\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit, represented\",\" by an error-protected register that was encoded with your Exercise 1\",\" implementation. Your goal is to perform a bit-flip syndrome\",\" measurement on the register, to determine if any of the bits have been\",\" flipped.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state  is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Output\",\" An array of the 3 syndrome measurement results that the Steane code\",\" produces.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit, represented\",\" by an error-protected register that was encoded with your Exercise 1\",\" implementation. Your goal is to perform a phase-flip syndrome\",\" measurement on the register, to determine if any of the qubits have\",\" suffered a phase-flip error.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Output\",\" An array of the 3 syndrome measurement results that the Steane code\",\" produces.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise4\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":152,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"syndrome\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with the 3-result array of syndrome\",\" measurements provided by the bit-flip or phase-flip measurement\",\" operations. Your goal is to determine the index of the broken qubit\",\" (if any) based on these measurements.\",\"\",\" As a reminder, for Steane's code, the following table shows the\",\" relationship between the syndrome measurements and the index of the\",\" broken qubit:\",\" -----------------------\",\" 000 = No error\",\" 001 = Error or qubit 0\",\" 010 = Error on qubit 1\",\" 011 = Error on qubit 2\",\" 100 = Error on qubit 3\",\" 101 = Error on qubit 4\",\" 110 = Error on qubit 5\",\" 111 = Error on qubit 6\",\" -----------------------\",\"\",\" # Input\",\" ## syndrome\",\" An array of the 3 syndrome measurement results from the bit-flip or\",\" phase-flip measurement operations. These will come from your\",\" implementations of Exercise 2 and Exercise 3.\",\"\",\" # Output\",\" An Int identifying the index of the broken qubit, based on the\",\" syndrome measurements. If none of the qubits are broken, you should\",\" return -1.\",\"\",\" # Remarks\",\" This is a \\\"function\\\" instead of an \\\"operation\\\" because it's a purely\",\" classical method. It doesn't have any quantum parts to it, just lots\",\" of regular old classical math and logic.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise4\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":152,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise5\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":179,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a logical qubit represented by an\",\" error-protected register of 7 physical qubits. This register was\",\" produced by your implementation of Exercise 1. It is in an unknown\",\" state, but one of its qubits may or may not have suffered a bit-flip\",\" error, and another qubit may or may not have suffered a phase-flip\",\" error. Your goal is to use your implementations of Exercises 2, 3, and\",\" 4 to detect and correct the bit-flip and/or phase-flip errors in the\",\" register.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Remarks\",\" This test may take a lot longer to run than you're used to, because it\",\" tests every possible combination of bit and phase flips on a whole\",\" bunch of different original qubit states. Don't worry if it doesn't\",\" immediately finish!\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Lab11\",\"Name\":\"Exercise5\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs\",\"Position\":{\"Item1\":179,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
#line hidden
namespace QSharpExercises.Lab11
{
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Body, 30, 63)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Adjoint, 30, 63)]
    public partial class Exercise1 : Adjointable<(Qubit,IQArray<Qubit>)>, ICallable
    {
        public Exercise1(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Exercise1";
        String ICallable.FullName => "QSharpExercises.Lab11.Exercise1";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(spares[3L]);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(spares[4L]);
#line 32 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(spares[5L]);
#line 33 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[1L]));
#line 34 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[0L]));
#line 35 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], spares[0L]));
#line 36 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], spares[2L]));
#line 37 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], original));
#line 38 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], spares[1L]));
#line 39 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], spares[2L]));
#line 40 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], original));
#line 41 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[0L]));
#line 42 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[1L]));
#line 43 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[2L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[2L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[1L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[0L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], original));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], spares[2L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], spares[1L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], original));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], spares[2L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], spares[0L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[0L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[1L]));
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(spares[5L]);
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(spares[4L]);
#line 30 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(spares[3L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __DataIn__((Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit original, IQArray<Qubit> spares)
        {
            return __m__.Run<Exercise1, (Qubit,IQArray<Qubit>), QVoid>((original, spares));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Body, 63, 98)]
    public partial class Exercise2 : Operation<IQArray<Qubit>, IQArray<Result>>, ICallable
    {
        public Exercise2(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Exercise2";
        String ICallable.FullName => "QSharpExercises.Lab11.Exercise2";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, IQArray<Result>> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 64 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            Message__.Apply("BRO WHAT EXERCISE 2");
#line 65 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            var len = register.Length;
#line hidden
            {
#line 66 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                var qs = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 67 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    foreach (var i in new QRange(0L, (len - 1L)))
#line hidden
                    {
#line 68 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                        foreach (var j in new QRange(0L, 2L))
#line hidden
                        {
#line 69 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                            if (((((i + 1L) >> (int)j) % 2L) == 0L))
                            {
#line 70 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                                Message__.Apply(String.Format("{0} {1}", i, j));
#line 71 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((register.Slice(new QRange(i, i)), qs[(2L - j)]));
                            }
                        }
                    }

#line 78 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    return Microsoft__Quantum__Measurement__MultiM.Apply(qs);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Exercise2, IQArray<Qubit>, IQArray<Result>>(register);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Body, 98, 153)]
    public partial class Exercise3 : Operation<IQArray<Qubit>, IQArray<Result>>, ICallable
    {
        public Exercise3(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Exercise3";
        String ICallable.FullName => "QSharpExercises.Lab11.Exercise3";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, IQArray<Result>> __Body__ => (__in__) =>
        {
            var register = __in__;
#line hidden
            {
#line 99 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                var qs = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 100 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qs));
#line 101 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    var res = QArray<Result>.Create(3L);
#line 102 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    foreach (var i in new QRange(0L, (register.Length - 1L)))
#line hidden
                    {
#line 103 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                        foreach (var j in new QRange(0L, 2L))
#line hidden
                        {
#line 104 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                            if (((((i + 1L) >> (int)j) % 2L) == 0L))
                            {
#line 105 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                                Message__.Apply(String.Format("{0} {1}", i, j));
#line 106 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                                Microsoft__Quantum__Intrinsic__H.Controlled.Apply((register.Slice(new QRange(i, i)), qs[j]));
                            }
                        }
                    }

#line 110 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qs));
#line 111 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    foreach (var j in new QRange(0L, 2L))
#line hidden
                    {
#line 112 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                        res.Modify(j, Microsoft__Quantum__Intrinsic__M.Apply(qs[j]));
                    }

#line 114 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
                    return res;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Exercise3, IQArray<Qubit>, IQArray<Result>>(register);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Body, 153, 180)]
    public partial class Exercise4 : Function<IQArray<Result>, Int64>, ICallable
    {
        public Exercise4(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Exercise4";
        String ICallable.FullName => "QSharpExercises.Lab11.Exercise4";
        public override Func<IQArray<Result>, Int64> __Body__ => (__in__) =>
        {
            var syndrome = __in__;
#line 155 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            throw new ExecutionFailException("Not implemented.");
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__(IQArray<Result> data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Result> syndrome)
        {
            return __m__.Run<Exercise4, IQArray<Result>, Int64>(syndrome);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs", OperationFunctor.Body, 180, -1)]
    public partial class Exercise5 : Operation<IQArray<Qubit>, QVoid>, ICallable
    {
        public Exercise5(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Exercise5";
        String ICallable.FullName => "QSharpExercises.Lab11.Exercise5";
        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 182 "/home/ubuntu/timothys-folder/QSharpExercises/Lab11/Lab11.qs"
            throw new ExecutionFailException("Not implemented.");
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Exercise5, IQArray<Qubit>, QVoid>(register);
        }
    }
}