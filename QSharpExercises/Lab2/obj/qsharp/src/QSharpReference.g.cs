//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"OperationSyntax\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"param1\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"param2\"]},\"Type\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Double\"},{\"Case\":\"String\"}]]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]},{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"param3\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":10},\"Item2\":{\"Line\":4,\"Column\":16}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"param4\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":26},\"Item2\":{\"Line\":4,\"Column\":32}}}]}]]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Double\"},{\"Case\":\"String\"}]]},{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]}]]},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This is an operation in Q#, which you can think of like a method for a\",\" classical program. It can take in arguments and return a value, just\",\" like a classical method would. This particular operation takes 4\",\" parameters. Note that Q# is a strongly-typed language, so the types of\",\" each parameter need to be explicitly defined in the operation\",\" signature.\",\"\",\" # Input\",\" ## param1\",\" param1 is an Int type, which refers to a 64-bit signed integer. In C#\",\" and Java this would be called a \\\"long\\\", in Python it's basically just\",\" an int.\",\"\",\" ## param2\",\" param2 is a tuple (an object with two elements in it). The first part\",\" is a Double, which is a 64-bit floating point number - essentially\",\" it's the same as the \\\"double\\\" type in C# and Java, and the \\\"float\\\"\",\" type in Python. The second element is just a typical string, like\",\" you'd use in any modern language. To get these two parts, you'll have\",\" to unpack the tuple in the operation's body.\",\"\",\" ## param3 and param4\",\" The third and fourth parameters both belong to a tuple, like param2,\",\" but are decomposed directly into individual parameters in the\",\" operation signature. param3 is a Qubit, which is Q#'s type for qubits.\",\" Param4 is an array of qubits (also called a qubit register). Arrays in\",\" Q# work the same as arrays in C, C++, C# and Java: they have a fixed\",\" size and all of the elements in them must be the same type. This is\",\" different from Python lists, so if you're used to Python, keep that in\",\" mind.\",\"\",\" # Output\",\" This function returns a \\\"Result\\\", which is a type that represents the\",\" result of a single qubit measurement. It only has two possible values:\",\" Zero and One.\",\"\",\" # Remarks\",\" As you can see, Q# supports documentation comments (docstrings). They\",\" start with three slashes and use conventional Markdown syntax. Visual\",\" Studio will parse these and use them for Intellisense when you hover\",\" over operations. For example, hover over the name of this operation\",\" (OperationSyntax), and you'll see the summary text show up in a little\",\" tooltip along with the operation's signature. For more info on these,\",\" take a look at the \\\"Comments\\\" section of the official documentation:\",\" https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/programstructure/comments?view=qsharp-preview\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"OperationSyntax\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"VariableUsage\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This operation shows how variable declaration and assignment works in\",\" Q#.\",\"\",\" # Remarks\",\" For reference, Q# distinguishes between mutable and immutable\",\" variables. Any variable can be either one. Operation arguments are\",\" *always* immutable within the body of the operation.\",\"\",\" Also note that the return function of this operation is \\\"Unit\\\". This\",\" is basically the same thing as \\\"void\\\" or \\\"None\\\" in most languages -\",\" it's the \\\"nothing\\\" type.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"VariableUsage\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"CommonTypes\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":138,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inputQubit\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":52}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This shows some of the common types you'll run into in Q#. Note that\",\" it takes in some qubits as parameters, because we don't want to cover\",\" how they get allocated quite yet - that will come in a later\",\" operation.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"CommonTypes\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":138,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"SingleQubitGates\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":254,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" Deallocation occurs after exiting function\",\"\",\" # Summary\",\" Shows some of the common single qubit gates in Q# and how to use them.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"SingleQubitGates\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":254,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"ControlFlow\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":303,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Shows some of the control flow statements you can use in Q#.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"ControlFlow\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":303,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"MultiQubitGates\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":376,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Shows some of the multi-qubit gates in Q#, and how to run gates and\",\" operations that are controlled on multiple qubits.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"MultiQubitGates\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":376,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":427,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Qubit\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This shows how to create an operation that can be run in Adjoint mode\",\" (run backwards) or in Controlled mode (run with control qubits).\",\" See the \\\"Operation Characteristics\\\" section of the \\\"Operations and\",\" Functions\\\" doc for more info:\",\" https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/operationsandfunctions#operation-characteristics\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":427,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":427,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsAdjoint specialization for QSharpExercises.QSharpReference.Functors1\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":427,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsControlled specialization for QSharpExercises.QSharpReference.Functors1\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors1\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":427,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":57}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for QSharpExercises.QSharpReference.Functors1\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":440,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Qubit\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This is equivalent to Functors1, but with the specializations declared\",\" using auto-generation directives. See this Q# Enhancement Proposal\",\" (QEP) for more info:\",\" https://github.com/microsoft/qsharp-language/blob/main/Implemented/partial-specialization-inference.md\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":441,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":464,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":476,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors2\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":494,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":504,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Qubit\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This is equivalent to Functors1 and Functors2, but with the\",\" specializations explicitly defined. Note that it is possible to mix\",\" explicit specialization declarations and auto-generation directives\",\" (not shown here). See the \\\"Specialization Declarations\\\" section of the\",\" docs for more info:\",\" https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/programstructure/specializationdeclarations\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":505,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":511,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":517,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"Functors3\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":523,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"FunctorCalls\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":532,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" This shows you how to run operations in Adjoint or Controlled mode.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.QSharpReference\",\"Name\":\"FunctorCalls\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs\",\"Position\":{\"Item1\":532,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
#line hidden
namespace QSharpExercises.QSharpReference
{
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 81, 107)]
    public partial class OperationSyntax : Operation<(Int64,(Double,String),(Qubit,IQArray<Qubit>)), Result>, ICallable
    {
        public OperationSyntax(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,(Double,String),(Qubit,IQArray<Qubit>))>, IApplyData
        {
            public In((Int64,(Double,String),(Qubit,IQArray<Qubit>)) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3.Item1)?.Qubits, ((IApplyData)Data.Item3.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "OperationSyntax";
        String ICallable.FullName => "QSharpExercises.QSharpReference.OperationSyntax";
        public override Func<(Int64,(Double,String),(Qubit,IQArray<Qubit>)), Result> __Body__ => (__in__) =>
        {
            var (param1,param2,(param3,param4)) = __in__;
#line 87 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var (param2FirstElement,param2SecondElement) = param2;
#line 91 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            return Result.Zero;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((Int64,(Double,String),(Qubit,IQArray<Qubit>)) data) => new In(data);
        public override IApplyData __DataOut__(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__, Int64 param1, (Double,String) param2, Qubit param3, IQArray<Qubit> param4)
        {
            return __m__.Run<OperationSyntax, (Int64,(Double,String),(Qubit,IQArray<Qubit>)), Result>((param1, param2, (param3, param4)));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 107, 139)]
    public partial class VariableUsage : Operation<QVoid, QVoid>, ICallable
    {
        public VariableUsage(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "VariableUsage";
        String ICallable.FullName => "QSharpExercises.QSharpReference.VariableUsage";
        protected ICallable<Int64, String> Microsoft__Quantum__Convert__IntAsString
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 117 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var var1 = 0L;
#line 122 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var var2 = "hello world";
#line 130 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var2 = String.Format("var1 = {0}", Microsoft__Quantum__Convert__IntAsString.Apply(var1));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsString = this.__Factory__.Get<ICallable<Int64, String>>(typeof(global::Microsoft.Quantum.Convert.IntAsString));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<VariableUsage, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 139, 255)]
    public partial class CommonTypes : Operation<(Qubit,IQArray<Qubit>), QVoid>, ICallable
    {
        public CommonTypes(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CommonTypes";
        String ICallable.FullName => "QSharpExercises.QSharpReference.CommonTypes";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,(Double,String),(Qubit,IQArray<Qubit>)), Result> OperationSyntax__
        {
            get;
            set;
        }

        public override Func<(Qubit,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (inputQubit,register) = __in__;
#line 141 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var anInt = 0L;
#line 142 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var aDouble = 0D;
#line 143 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var aString = "string";
#line 144 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var aBool = false;
#line 145 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var aUnit = QVoid.Instance;
#line 146 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var aResult = Result.One;
#line 149 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var tuple = (1L, 2L, 3D);
#line 150 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var (e0,e1,e2) = tuple;
#line 151 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var (e3,_,_) = tuple;
#line 152 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var nestedTuple = (1L, (2D, "3", (4D, 5L)));
#line 167 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var range = new QRange(0L, 3L);
#line 171 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var rangeWithStep = new QRange(0L, 2L, 10L);
#line 175 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var negativeRange = new QRange(10L, -(1L), 1L);
#line 181 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var intArray = QArray<Int64>.Create(10L);
#line 188 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var arrayLength = intArray.Length;
#line 191 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var array3 = intArray[3L];
#line 194 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var _2dArray = QArray<IQArray<Int64>>.Create(4L);
#line 198 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            intArray = QArray<Int64>.Add(intArray, new QArray<Int64>(8L));
#line 209 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            intArray.Modify(3L, 22L);
#line 213 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var subArray = (IQArray<Int64>)intArray.Slice(new QRange(0L, 3L));
#line 216 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var subArray2 = (IQArray<Int64>)intArray.Slice(new QRange(1L, 2L, 7L));
#line 219 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var subArray3 = (IQArray<Int64>)new QArray<Int64>(intArray[0L], intArray[9L]);
#line 229 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var method = OperationSyntax__;
#line 232 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var result1 = method.Apply<Result>((1L, (2D, "3"), (inputQubit, register)));
#line 241 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var partialMethod = method.Partial(new Func<(Int64,(Qubit,IQArray<Qubit>)), (Int64,(Double,String),(Qubit,IQArray<Qubit>))>((__arg1__) => (__arg1__.Item1, (4.1D, "five"), (__arg1__.Item2.Item1, __arg1__.Item2.Item2))));
#line 246 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var result2 = partialMethod.Apply<Result>((6L, (inputQubit, register)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.OperationSyntax__ = this.__Factory__.Get<ICallable<(Int64,(Double,String),(Qubit,IQArray<Qubit>)), Result>>(typeof(OperationSyntax));
        }

        public override IApplyData __DataIn__((Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit inputQubit, IQArray<Qubit> register)
        {
            return __m__.Run<CommonTypes, (Qubit,IQArray<Qubit>), QVoid>((inputQubit, register));
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 255, 304)]
    public partial class SingleQubitGates : Operation<QVoid, QVoid>, ICallable
    {
        public SingleQubitGates(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SingleQubitGates";
        String ICallable.FullName => "QSharpExercises.QSharpReference.SingleQubitGates";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> I__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Y
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__T
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rx
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rz
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__R1
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Qubit)> Microsoft__Quantum__Intrinsic__R1Frac
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 267 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                var qubit = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 269 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    I__.Apply(qubit);
#line 270 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 271 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__Y.Apply(qubit);
#line 272 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__Z.Apply(qubit);
#line 273 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qubit);
#line 274 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__S.Apply(qubit);
#line 275 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__T.Apply(qubit);
#line 277 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__Rx.Apply((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance), qubit));
#line 278 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__Ry.Apply((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance), qubit));
#line 279 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__Rz.Apply((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance), qubit));
#line 284 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__R1.Apply((((3D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) / 4D), qubit));
#line 289 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Apply((3L, 5L, qubit));
#line 293 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    var measurement = Microsoft__Quantum__Intrinsic__M.Apply(qubit);
#line 298 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Reset__.Apply(qubit);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubit);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.I__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.I));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Y = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Y));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Microsoft__Quantum__Intrinsic__T = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.T));
            this.Microsoft__Quantum__Intrinsic__Rx = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rx));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Intrinsic__Rz = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rz));
            this.Microsoft__Quantum__Intrinsic__R1 = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1));
            this.Microsoft__Quantum__Intrinsic__R1Frac = this.__Factory__.Get<IUnitary<(Int64,Int64,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1Frac));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<SingleQubitGates, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 304, 377)]
    public partial class ControlFlow : Operation<QVoid, QVoid>, ICallable
    {
        public ControlFlow(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ControlFlow";
        String ICallable.FullName => "QSharpExercises.QSharpReference.ControlFlow";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 305 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var intArray = QArray<Int64>.Create(10L);
#line 306 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var length = intArray.Length;
#line 307 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var result = Result.One;
#line 308 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var isResultZero = (result == Result.Zero);
#line 309 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var someOtherBool = true;
#line 316 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            foreach (var i in new QRange(0L, (length - 1L)))
#line hidden
            {
#line 317 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                intArray.Modify(i, i);
            }

#line 322 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            foreach (var i in intArray?.Copy())
#line hidden
            {
            }

#line 332 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var someNumber = 0L;
#line 333 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            while (true)
            {
#line 334 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                someNumber = (someNumber + 1L);
                if ((someNumber == 10L))
                {
                    break;
                }
                else
                {
#line 342 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Message__.Apply(String.Format("Number is {0}/10.", someNumber));
                }
            }

#line 347 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            if (isResultZero)
            {
#line 352 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                throw new ExecutionFailException("Oh no, we measured |0> instead of |1>! Disaster!");
            }
            else if (someOtherBool)
            {
#line 355 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                Message__.Apply("We measured a |1>, yay!");
            }
            else
            {
#line 363 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                return QVoid.Instance;
            }

#line 370 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            var resultAsInt = ((result == Result.One) ? 1L : 0L);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<ControlFlow, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 377, 428)]
    public partial class MultiQubitGates : Operation<QVoid, QVoid>, ICallable
    {
        public MultiQubitGates(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MultiQubitGates";
        String ICallable.FullName => "QSharpExercises.QSharpReference.MultiQubitGates";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 378 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                var qubits = Allocate__.Apply(10L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 383 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__SWAP.Apply((qubits[0L], qubits[1L]));
#line 390 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[2L], qubits[3L]));
#line 395 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__CCNOT.Apply((qubits[4L], qubits[5L], qubits[6L]));
#line 401 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((qubits.Slice(new QRange(0L, 8L)), qubits[9L]));
#line 407 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Microsoft__Quantum__Intrinsic__H.Controlled.Apply((qubits.Slice(new QRange(0L, 8L)), qubits[9L]));
#line 411 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    ResetAll__.Apply(qubits);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__CCNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CCNOT));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<MultiQubitGates, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 428, 441)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Adjoint, 428, 441)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Controlled, 428, 441)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.ControlledAdjoint, 428, 441)]
    public partial class Functors1 : Unitary<Qubit>, ICallable
    {
        public Functors1(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Functors1";
        String ICallable.FullName => "QSharpExercises.QSharpReference.Functors1";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__T
        {
            get;
            set;
        }

        public override Func<Qubit, QVoid> __Body__ => (__in__) =>
        {
            var target = __in__;
#line 431 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 432 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Apply(target);
#line 433 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Qubit, QVoid> __AdjointBody__ => (__in__) =>
        {
            var target = __in__;
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Adjoint.Apply(target);
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Adjoint.Apply(target);
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, target));
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Controlled.Apply((__controlQubits__, target));
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Controlled.Apply((__controlQubits__, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Adjoint.Controlled.Apply((__controlQubits__, target));
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Adjoint.Controlled.Apply((__controlQubits__, target));
#line 428 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Microsoft__Quantum__Intrinsic__T = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.T));
        }

        public override IApplyData __DataIn__(Qubit data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit target)
        {
            return __m__.Run<Functors1, Qubit, QVoid>(target);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 442, 465)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Adjoint, 465, 477)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Controlled, 477, 495)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.ControlledAdjoint, 495, 505)]
    public partial class Functors2 : Unitary<Qubit>, ICallable
    {
        public Functors2(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Functors2";
        String ICallable.FullName => "QSharpExercises.QSharpReference.Functors2";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__T
        {
            get;
            set;
        }

        public override Func<Qubit, QVoid> __Body__ => (__in__) =>
        {
            var target = __in__;
#line 444 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 445 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Apply(target);
#line 446 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Qubit, QVoid> __AdjointBody__ => (__in__) =>
        {
            var target = __in__;
#line 465 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Adjoint.Apply(target);
#line 465 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Adjoint.Apply(target);
#line 465 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 477 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, target));
#line 477 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Controlled.Apply((__controlQubits__, target));
#line 477 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Controlled.Apply((__controlQubits__, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 495 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Controlled.Adjoint.Apply((__controlQubits__, target));
#line 495 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Controlled.Adjoint.Apply((__controlQubits__, target));
#line 495 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Adjoint.Apply((__controlQubits__, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Microsoft__Quantum__Intrinsic__T = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.T));
        }

        public override IApplyData __DataIn__(Qubit data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit target)
        {
            return __m__.Run<Functors2, Qubit, QVoid>(target);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 506, 512)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Adjoint, 512, 518)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Controlled, 518, 524)]
    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.ControlledAdjoint, 524, 533)]
    public partial class Functors3 : Unitary<Qubit>, ICallable
    {
        public Functors3(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Functors3";
        String ICallable.FullName => "QSharpExercises.QSharpReference.Functors3";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__T
        {
            get;
            set;
        }

        public override Func<Qubit, QVoid> __Body__ => (__in__) =>
        {
            var target = __in__;
#line 507 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 508 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Apply(target);
#line 509 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Qubit, QVoid> __AdjointBody__ => (__in__) =>
        {
            var target = __in__;
#line 513 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Adjoint.Apply(target);
#line 514 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Adjoint.Apply(target);
#line 515 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (controls,target) = __in__;
#line 519 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((controls, target));
#line 520 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Controlled.Apply((controls, target));
#line 521 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Controlled.Apply((controls, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (controls,target) = __in__;
#line 525 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__T.Controlled.Apply((controls, target));
#line 526 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__S.Controlled.Apply((controls, target));
#line 527 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((controls, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Microsoft__Quantum__Intrinsic__T = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.T));
        }

        public override IApplyData __DataIn__(Qubit data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit target)
        {
            return __m__.Run<Functors3, Qubit, QVoid>(target);
        }
    }

    [SourceLocation("/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs", OperationFunctor.Body, 533, -1)]
    public partial class FunctorCalls : Operation<QVoid, QVoid>, ICallable
    {
        public FunctorCalls(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "FunctorCalls";
        String ICallable.FullName => "QSharpExercises.QSharpReference.FunctorCalls";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Functors1__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 534 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                var (controls,target) = (Allocate__.Apply(1L), Allocate__.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 535 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Functors1__.Apply(target);
#line 536 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Functors1__.Adjoint.Apply(target);
#line 537 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Functors1__.Controlled.Apply((controls, target));
#line 538 "/home/ubuntu/timothys-folder/QSharpExercises/Lab2/QSharpReference.qs"
                    Functors1__.Adjoint.Controlled.Apply((controls, target));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(controls);
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Functors1__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(Functors1));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<FunctorCalls, QVoid, QVoid>(QVoid.Instance);
        }
    }
}